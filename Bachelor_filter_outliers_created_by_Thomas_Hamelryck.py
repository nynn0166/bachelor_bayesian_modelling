import numpy as np
import matplotlib.pyplot as plt

# This code was generated by my supervisor, Thomas Hamelryck, using the top500 database of high-quality protein structures
def filter_outliers(phi_psi, neighbors=20, contamination="auto"):
    """
    Filter away outliers using LocalOutlierFactor.

    phi_psi: angles
    neighbors, contamination: parameters of LocalOutlierFactor (default 20, "auto")

    return: list of N indices (-1=outlier, 1=inlier) 
    """
    from sklearn.neighbors import LocalOutlierFactor
    alg = LocalOutlierFactor(n_neighbors=neighbors, contamination=contamination)

    # 1=ok, -1=outlier
    y_pred = alg.fit_predict(phi_psi)

    # Also flag central band as outliers 
    for i in range(0, len(phi_psi)):
        if -0.3 < phi_psi[i,0] < 0.3:
            y_pred[i] = -1

    # Filter away outliers
    inliers = []
    for i in range(0, len(y_pred)):
        if y_pred[i]>0:
            inliers.append(phi_psi[i])

    n_outliers = (y_pred<0).sum()

    # To array
    inliers = np.array(inliers)

    return inliers, n_outliers, y_pred

def get_angles(fname = "top500.txt"):
    """
    Get phi, psi angles.
    """
    fp = open("top500.txt", "r")
    d=[]
    for l in fp.readlines():
        if not l[0]=="#":
            try:
                phi, psi = map(float, l.split()[-2:])
                d.append([phi, psi])
            except:
                pass
    fp.close()
    d = np.array(d)
    return d

def plot_ramas(angles, angles_filtered):
    """
    Plot rama of all data and inliers.
    """
    fig, (ax0, ax1) = plt.subplots(ncols=2, sharey=True, figsize=(9, 4))
    ax0.set_title("All data")
    ax0.hexbin(angles[:,0], angles[:,1], gridsize=50, bins="log", cmap='inferno')
    ax1.set_title("Outliers removed")
    ax1.hexbin(angles_filtered[:,0], angles_filtered[:,1], gridsize=50, bins="log", cmap='inferno')
    plt.show()

if __name__=="__main__":

    phi_psi = get_angles()
    inliers, n, y_pred = filter_outliers(phi_psi)
    print("Nr of outliers: ", (100.0*n)/len(phi_psi)) 
    plot_ramas(phi_psi, inliers)
    np.save("top500_inliers.npy", inliers)

    # Test loading
    inliers = np.load("top500_inliers.npy")

